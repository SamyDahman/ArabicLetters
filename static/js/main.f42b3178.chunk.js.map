{"version":3,"sources":["CanvasContext.js","Letter.js","Canvas.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["CanvasContext","React","createContext","CanvasProvider","children","useState","isDrawing","setIsDrawing","canvasRef","useRef","contextRef","Provider","value","prepareCanvas","canvas","current","width","height","context","getContext","lineCap","strokeStyle","lineWidth","fillStyle","fillRect","startDrawing","nativeEvent","offsetX","offsetY","beginPath","moveTo","finishDrawing","closePath","clearCanvas","draw","lineTo","stroke","Letter","prediction","max_val","indexOf","Math","max","className","Canvas","useContext","predictions","setPredictions","modelRef","loadModel","a","tf","useEffect","onMouseDown","onMouseUp","img","Image","addEventListener","tensor","fromPixels","resizeBilinear","reshape","classification","predict","Array","from","dataSync","makePrediction","src","toDataURL","onMouseMove","ref","style","border","borderColor","margin","background","onClick","Nav","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f42b3178.chunk.js","sourcesContent":["import React, { useContext, useRef, useState } from \"react\";\r\n\r\nconst CanvasContext = React.createContext();\r\n\r\nexport const CanvasProvider = ({ children }) => {\r\n  const [isDrawing, setIsDrawing] = useState(false)\r\n  const canvasRef = useRef(null);\r\n  const contextRef = useRef(null);\r\n\r\n  const prepareCanvas = () => {\r\n    const canvas = canvasRef.current\r\n\r\n    canvas.width = 300;\r\n    canvas.height = 300;\r\n\r\n    const context = canvas.getContext(\"2d\")\r\n    context.lineCap = \"round\";\r\n    context.strokeStyle = \"white\";\r\n    context.lineWidth = 20;\r\n    context.fillStyle = \"Black\"\r\n    context.fillRect(0, 0, canvas.width, canvas.height)\r\n    contextRef.current = context;\r\n  };\r\n\r\n  const startDrawing = ({ nativeEvent }) => {\r\n    const { offsetX, offsetY } = nativeEvent;\r\n    contextRef.current.beginPath();\r\n    contextRef.current.moveTo(offsetX, offsetY);\r\n    setIsDrawing(true);\r\n  };\r\n\r\n  const finishDrawing = () => {\r\n    contextRef.current.closePath();\r\n    setIsDrawing(false);\r\n  };\r\n\r\n  const draw = ({ nativeEvent }) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n    const { offsetX, offsetY } = nativeEvent;\r\n    contextRef.current.lineTo(offsetX, offsetY);\r\n    contextRef.current.stroke();\r\n  };\r\n\r\n  const clearCanvas = () => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext(\"2d\")\r\n    context.fillStyle = \"Black\"\r\n    context.fillRect(0, 0, canvas.width, canvas.height)\r\n  }\r\n\r\n  return (\r\n    <CanvasContext.Provider\r\n      value={{\r\n        isDrawing,\r\n        canvasRef,\r\n        contextRef,\r\n        prepareCanvas,\r\n        startDrawing,\r\n        finishDrawing,\r\n        clearCanvas,\r\n        draw,\r\n      }}\r\n    >\r\n      {children}\r\n    </CanvasContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useCanvas = () => useContext(CanvasContext);","import React from \"react\";\r\nimport \"./Letter.css\";\r\n\r\nconst Letter = ({prediction}) => {\r\n\r\n    const labels =  ['أ' ,' ب ',' ت ',' ث ',' ج ',' ح ',' خ ',' د ',' ذ ',' ر ',' ز ',' س ',\r\n    ' ش ',' ص ',' ض ',' ط ',' ظ ',' ع ',' غ ', 'ف ',' ق ',' ك ',' ل',' م ',' ن ',' ه ',' و ',' ي ']\r\n    const names =  ['alif', 'baa', 'taa', 'thaa', 'jim', 'haa', 'khaa', 'daal', 'dhaal', 'raa', 'zay',\r\n  'siin', 'shiin', 'saad', 'daad', \"Ta\", \"Dha\", \"ain\", \"ghain\", \"feh\", \"qaf\", \"kaf\", \"lam\", \"mim\",\r\n  \"nun\", \"heh\", \"wa\", \"yeh\"]\r\n    let max_val = 1\r\n    if (prediction != null) {\r\n    max_val = prediction.indexOf(Math.max(...prediction));\r\n    }\r\n    return (\r\n        <div className = \"card\">\r\n            <h1 className = \"result\">{labels[max_val]}</h1>\r\n            <p1 className = \"name\">{names[max_val]}</p1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Letter;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./canvas.css\"\r\nimport { useCanvas } from \"./CanvasContext\";\r\nimport Letter from \"./Letter\"\r\nimport * as tf from '@tensorflow/tfjs'\r\n\r\nexport function Canvas() {\r\n  const {\r\n    canvasRef,\r\n    prepareCanvas,\r\n    startDrawing,\r\n    finishDrawing,\r\n    draw,\r\n    clearCanvas\r\n  } = useCanvas();\r\n\r\n  const [predictions,setPredictions] = useState(null)\r\n  const modelRef = useRef(null)\r\n\r\n  const loadModel = async () => {\r\n    modelRef.current = await tf.loadLayersModel(\"https://raw.githubusercontent.com/SamyDahman/tfjs-model-arabicletters/main/model.json\");\r\n  }\r\n\r\n  const makePrediction = (img) => {\r\n    tf.tidy(() => {\r\n      let tensor = tf.browser.fromPixels(img).resizeBilinear([150,150]);\r\n      tensor = tensor.reshape([1,150,150,3]);\r\n      tensor = tf.cast(tensor, \"float32\")\r\n      if (tensor != null) {\r\n      let classification = modelRef.current.predict(tensor);\r\n      setPredictions(Array.from(classification.dataSync()))\r\n      }\r\n    });\r\n\r\n}\r\n\r\n  const stopDrawing = () => {\r\n    finishDrawing()\r\n    var img = new Image();\r\n    img.addEventListener(\"load\", ()=> {\r\n      if (modelRef.current != null){\r\n        makePrediction(img)\r\n      }\r\n    })\r\n    img.src = canvasRef.current.toDataURL(\"image/png\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    prepareCanvas();\r\n    loadModel();\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div className = \"main\">\r\n      <div className = \"canvass\">\r\n      <p1>Draw Here</p1>\r\n      <canvas\r\n        onMouseDown={startDrawing}\r\n        onMouseUp={stopDrawing}\r\n        onMouseMove={draw}\r\n        ref={canvasRef}\r\n        style={{\r\n          border: '2px solid #000',\r\n          borderColor: \"lightgray\",\r\n          margin: 2,\r\n          background: \"Black\"\r\n        }}\r\n      />\r\n      <button className = \"button button--pan\" onClick={clearCanvas}><span>Clear Pad</span></button>\r\n      </div>\r\n      <Letter prediction = {predictions}/>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nconst Nav = () => {\r\n    return(\r\n        <nav className = \"Nav\">\r\n            <div className= \"title\"> \r\n            <h1 style={{\"color\": \"white\"}} >Recognizing the Arabic Alphabet with Machine Learning</h1> \r\n            <p1 style={{\"color\": \"white\"}}>Author: Samy Dahman</p1>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React from \"react\";\nimport {Canvas} from \"./Canvas\"\nimport Nav from \"./Nav\";\nimport './App.css';\nimport \"./main.css\"\n\nconst App = () => {\n\n  return(\n    <div className= \"App\">\n      <Nav />\n      <Canvas />\n      <div className= \"description\">\n        <p1 className=\"description-text\">This site uses a convolutional neural network to perform image recognition on \n          drawings of the arabic letters with around 91.16% accuracy. The orginal dataset comes from a study and research paper out \n          of Egypt. The libraries and frameworks used in its contruction were React JS, Tensorflow JS, and Tensorflow.\n          The process for creating the model started with a python script run using Google Colab in order to train a convolutional\n          neural net that was contructed using the Tensorflow library. From there, the model was exported. You can find that script\n          at this <a href=\"https://github.com/SamyDahman/ArabicLettersTrainingScript\">repository</a> on my Github account.\n        </p1>\n        <p1 className=\"description-text\">Citation for Data: A. El-Sawy, M. Loey, and H. EL-Bakry, “Arabic handwritten characters recognition using convolutional\n           neural network,” WSEAS Transactions on Computer Research, vol. 5, pp. 11–19, 2017. \n        </p1>\n        <p1 className=\"description-text\"></p1>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { CanvasProvider } from \"./CanvasContext\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <CanvasProvider>\n      <App />\n    </CanvasProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}